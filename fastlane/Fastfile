# tmp keychain name
# default is `fastlane_tmp_keychain`
tmp_keychain = ENV["TMP_KEYCHAIN_NAME"] || "fastlane_tmp_keychain"

# it could be absolute path
distribute_cert_path = ENV["DISTRIBUTE_CERT_PATH"] 
distribute_cert_pwd = ENV["DISTRIBUTE_CERT_PASSWORD"] 

# it could be absolute path
development_cert_path = ENV["DEVELOPMENT_CERT_PATH"]
development_cert_pwd = ENV["DEVELOPMENT_CERT_PASSWORD"]

# build variables
team_id = ENV["APPLE_TEAM_ID"]
bundle_id = ENV["APPLE_BUNDLE_ID"]

# apple code siging identity
# e.g: Apple Development: XXXX 
signing_id = ENV["APPLE_CODE_SIGNING_ID_KRYSTAL"] 
test_flight_signing_id = ENV["APPLE_CODE_SIGNING_ID"] 

# profile names
dev_profile = ENV["DEV_PROFILE"]
krystal_dev_profile = ENV["KRYSTAL_DEV_PROFILE"]
ad_hoc_profile = ENV["AD_HOC_PROFILE"]
ext_ad_hoc_profile = ENV["EXT_AD_HOC_PROFILE"]
krystal_prod_profile = ENV["KRYSTAL_PROD_PROFILE"]
krystal_prod_ext_profile = ENV["KRYSTAL_PROD_EXT_PROFILE"]

# profile paths
dev_profile_path = ENV["DEV_PROFILE_PATH"] 
krystal_dev_profile_path = ENV["KRYSTAL_DEV_PROFILE_PATH"]
ad_hoc_profile_path = ENV["AD_HOC_PROFILE_PATH"]
ext_ad_hoc_profile_path = ENV["EXT_AD_HOC_PROFILE_PATH"]
krystal_prod_profile_path = ENV["KRYSTAL_PROD_PROFILE_PATH"]
krystal_prod_ext_profile_path = ENV["KRYSTAL_PROD_EXT_PROFILE_PATH"]

# sentry
sentry_token = ENV["SENTRY_TOKEN"]
org_slug = ENV["ORG_SLUG"]
project_slug = ENV["PROJECT_SLUG"]
sentry_url = ENV["SENTRY_URL"]

# testflight config 
apple_key_id = ENV["APPLE_KEY_ID"]
apple_issuer_id = ENV["APPLE_ISSUER_ID"]
apple_key_content = ENV["APPLE_KEY_CONTENT"]
apple_id = ENV["APPLE_ID"] 
#=====================

lane :all do
  prepare_keychain
  install_profiles
  update_project
  build
#  sentry_upload
end

lane :debug_mode do
  prepare_keychain
  install_profiles
  update_project
  build_debug
#  sentry_upload
end

# Build and upload to FDA
lane :fda do
  prepare_keychain
  install_profiles
  update_project
  build_debug
  firebase_distribution
end

# Build and upload to FDA, using self-hosted macos runner
lane :fda_self_hosted do
  prepare_keychain
  install_profiles
  update_project
  build_debug_self_hosted
  firebase_distribution
end

# pre_release build and upload to testflight 
lane :pre_release do 
  prepare_keychain
  install_profiles  

  update_code_signing_settings(
    team_id: team_id,
    code_sign_identity: test_flight_signing_id,
    targets: "KyberNetwork",
    profile_name: krystal_prod_profile
  )

  # update code signing identity for KrystalNotificationServiceExtension
  update_code_signing_settings(
    team_id: team_id,
    code_sign_identity: test_flight_signing_id,
    targets: "KrystalNotificationServiceExtension",
    profile_name: krystal_prod_ext_profile
  )

  # prepare connect to appstore 
  api_key = app_store_connect_api_key(
    key_id: apple_key_id,
    issuer_id: apple_issuer_id,
    key_content: apple_key_content,
    is_key_content_base64: true,
    duration: 1200,
    in_house: false
  )
  xcversion(version: "13.4")
  # build app
  @tid = bundle_id + ".KrystalNotificationServiceExtension" 
  build_app(
    workspace: "KyberNetwork.xcworkspace",
    configuration: "Release",
    scheme: "KyberNetwork",
    clean: true,
    output_directory: "archives",
    output_name: "KyberSwap.ipa",
    sdk: "iphoneos",
    export_method: "app-store",
    export_team_id: team_id,
    export_options: {
      provisioningProfiles: { 
        bundle_id => krystal_prod_profile,
        @tid => krystal_prod_ext_profile
      }
    }
  )

  pilot(
    apple_id: "#{apple_id}",
    app_identifier: "#{bundle_id}",
    skip_waiting_for_build_processing: true,
    skip_submission: true,
    distribute_external: false,
    notify_external_testers: false,
    ipa: "./archives/KyberSwap.ipa"
  )

end

# prepare_keychain create a tmp keychain and install 
# certificates. please prepare 2 certificates (.p12 format)
# 1 distribution certificate and 1 development certificate
lane :prepare_keychain do
  # travis provider is still working with github actions
  setup_ci(
    force: true,
    provider: "travis"
  )

  # unlock keychain and set as default
  unlock_keychain(
    path: tmp_keychain,
    password: "",
    set_default: true 
  )

  # import distribution certificate
  import_certificate(
    certificate_path: distribute_cert_path,
    certificate_password: distribute_cert_pwd,
    keychain_name: tmp_keychain,
    keychain_password: "",
    log_output: true
  )

  # import development certificate
  import_certificate(
    certificate_path: development_cert_path,
    certificate_password: development_cert_pwd,
    keychain_name: tmp_keychain,
    keychain_password: "",
    log_output: true
  )
end

# install_profiles 
lane :install_profiles do 
  # install dev profile
  install_provisioning_profile(path: dev_profile_path)
  # install krystall dev profile
  install_provisioning_profile(path: krystal_dev_profile_path)
  # install ad hoc profile
  install_provisioning_profile(path: ad_hoc_profile_path)
  # install extension ad hoc profile
  install_provisioning_profile(path: ext_ad_hoc_profile_path)
  # install krystal production profile
  install_provisioning_profile(path:krystal_prod_profile_path)
  # install krystal production extension profile
  install_provisioning_profile(path:krystal_prod_ext_profile_path)
end 

# update_project update devops code signing id 
# if you want to change this field, make sure 
# your certificate can sign on both of 2 targets
lane :update_project do 
  # update code signing identity for KyberNetwork
  # ref: https://docs.fastlane.tools/actions/update_code_signing_settings/
  update_code_signing_settings(
    team_id: team_id,
    code_sign_identity: signing_id,
    targets: "KyberNetwork",
    profile_name: krystal_dev_profile
  )

  # update code signing identity for KrystalNotificationServiceExtension
  update_code_signing_settings(
    team_id: team_id,
    code_sign_identity: signing_id,
    targets: "KrystalNotificationServiceExtension",
    profile_name: dev_profile
  )

  update_code_signing_settings(
    team_id: team_id,
    code_sign_identity: signing_id,
    targets: "SwiftMessages-SwiftMessages",
    profile_name: dev_profile
    path: "Pods/Pods.xcodeproj"
  )
end

# build build ipa and export by ad-hoc method
# output path: base_repo/archives/KyberSwap.ipa
lane :build do
  xcversion(version: "13.4")
  # build app
  @tid = bundle_id + ".KrystalNotificationServiceExtension" 
  build_app(
    workspace: "KyberNetwork.xcworkspace",
    configuration: "Release",
    scheme: "KyberNetwork",
    clean: true,
    output_directory: "archives",
    output_name: "KyberSwap.ipa",
    sdk: "iphoneos",
    export_method: "ad-hoc",
    export_team_id: team_id,
    export_options: {
      provisioningProfiles: { 
        bundle_id => ad_hoc_profile,
        @tid => ext_ad_hoc_profile
      }
    }
  )
end

lane :build_debug do
  xcversion(version: "13.4")
  # build app
  @tid = bundle_id + ".KrystalNotificationServiceExtension" 
  build_app(
    workspace: "KyberNetwork.xcworkspace",
    configuration: "Debug",
    scheme: "KyberNetwork",
    clean: true,
    output_directory: "archives",
    output_name: "KyberSwap.ipa",
    sdk: "iphoneos",
    export_method: "development",
    export_team_id: team_id,
    export_options: {
      provisioningProfiles: { 
        bundle_id => ad_hoc_profile,
        @tid => ext_ad_hoc_profile
      }
    }
  )
end

lane :build_debug_self_hosted do
  xcversion(version: "14.1")
  # build app
  @tid = bundle_id + ".KrystalNotificationServiceExtension" 
  build_app(
    workspace: "KyberNetwork.xcworkspace",
    configuration: "Debug",
    scheme: "KyberNetwork",
    clean: true,
    output_directory: "archives",
    output_name: "KyberSwap.ipa",
    sdk: "iphoneos",
    export_method: "development",
    export_team_id: team_id,
    export_options: {
      provisioningProfiles: { 
        bundle_id => ad_hoc_profile,
        @tid => ext_ad_hoc_profile
      }
    }
  )
end

lane :firebase_distribution do
  firebase_app_distribution(
    ipa_path: ENV["IPA_OUTPUT_PATH"],
    app: ENV["FIREBASE_APP_ID"],
    firebase_cli_token: ENV["FIREBASE_CLI_TOKEN"],
    groups: "sample-user-group",
    release_notes: "Git commit: #{last_git_commit[:abbreviated_commit_hash]}
    ",
  )
end

# Instruct fastlane to get device UDIDs from Firebase
# https://firebase.google.com/docs/app-distribution/register-additional-devices
lane :download_udids do
  firebase_app_distribution_get_udids(
      app: ENV["FIREBASE_APP_ID"],
      output_file: "./firebase_udids",
  )
end

lane :sentry_upload do 
  sentry_upload_dsym(
    auth_token: sentry_token,
    org_slug: org_slug,
    project_slug: project_slug,
    url: sentry_url
  )
end 

# bump_build_number increment xcodeproject's build number 
# this lane will be call at the end of build phase (after deploy to OTA success)
lane :bump_build_number do
  # make sure repo is clean
  reset_git_repo(skip_clean: true, force: true)
  git_pull
  @old_build_number = get_build_number(xcodeproj: "KyberNetwork.xcodeproj")
  increment_build_number()
  git_add
  @version = get_version_number(xcodeproj: "KyberNetwork.xcodeproj", target: "KyberNetwork")
  @build_number = get_build_number(xcodeproj: "KyberNetwork.xcodeproj") 
  git_commit(path: ["./*.plist", "KyberNetwork.xcodeproj/project.pbxproj"], message: "increase build number " + @build_number + " (ver: " + @version + ")")
end

lane :ci_bump_build_number do
  # make sure repo is clean
  reset_git_repo(skip_clean: true, force: true)
  git_pull
  @old_build_number = get_build_number(xcodeproj: "KyberNetwork.xcodeproj")
  increment_build_number()
  git_add
  @version = get_version_number(xcodeproj: "KyberNetwork.xcodeproj", target: "KyberNetwork")
  @build_number = get_build_number(xcodeproj: "KyberNetwork.xcodeproj") 
  git_commit(path: ["./*.plist", "KyberNetwork.xcodeproj/project.pbxproj"], message: "[no ci] increase build number " + @build_number + " (ver: " + @version + ")")
end

